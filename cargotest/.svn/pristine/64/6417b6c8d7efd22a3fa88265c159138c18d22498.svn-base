#coding=utf-8
import tornado.wsgi
import tornado.web
import sae.kvdb
import sys
import time
sys.path.append("Handler/")
from CustomerBaseHandler import CustomerBaseHandler
sys.path.append("Manager/")
import ShopInfoManager
import RecordManager
import BaiduMapManager
import OAuthManager
import PhotoManager

class CustomerSearchListHandler(CustomerBaseHandler):
    def get(self):
        openid = OAuthManager.get_openid_base(self)
        self.set_secure_cookie("user", openid)
        self.render("../static/template/CustomerSearchListRedirect.html", openid=openid)

    def post(self):
        openid = self.get_argument('openid')    # get openid from html
        # shopId = self.get_argument('shopId')
        # try to get location from wechat
        customerId = openid
        # request for nearby shop list
        if 'lng' and 'lat' in self.request.arguments:
            lng = self.get_argument('lng')
            lat = self.get_argument('lat')
            shops_tuple = ShopInfoManager.get_shop_nearby(lng, lat)
            shops_list = [list(shop_tuple) for shop_tuple in shops_tuple]

            shops = []
            for shop in shops_list:
                shop_img = PhotoManager.get_shop_photo_urls(shop[0])[0]
                shop_name = shop[1]
                star_rating = shop[7]*18
                dark_star_rating = (5-shop[7])*18
                shop_phone = shop[4]
                shop_id = shop[0]
                distance = 'not calculated yet!'
                item = [shop_name, star_rating, shop_phone, distance, shop_id, shop_img, dark_star_rating]
                shops.append(item)
            self.render("../static/template/CustomerSearchList.html", customerId=customerId, items=shops)

        # search for specific shop by name
        elif 'shop_name' in self.request.arguments:
            shop_name = self.get_argument('shop_name')
            raw_shop_ids = ShopInfoManager.get_shop_id_by_name(shop_name)
            shop_ids = [str(i).split(',')[0][1:] for i in raw_shop_ids]

            shops = []
            if shop_ids!=None:
                for shop_id in shop_ids:
                    '''MySQL show warning message when search by long type (for example, shop_id)
                    '''
                    shop = ShopInfoManager.get_shopAllInfo(shop_id)
                    shop_img = PhotoManager.get_shop_photo_urls(shop[0])[0]
                    shop_name = shop[1]
                    star_rating = shop[7]
                    dark_star_rating = (5-shop[7])*18
                    shop_phone = shop[4]
                    shop_id = shop[0]
                    distance = 'not calculated yet!'
                    item = [shop_name, star_rating, shop_phone, distance, shop_id, shop_img, dark_star_rating]
                    shops.append(item)
            self.render("../static/template/CustomerSearchList.html", customerId=customerId, items=shops)
