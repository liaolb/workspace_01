import tornado.wsgi
import datetime
import sae.kvdb
import sys
sys.path.append("Handler/")
import CustomerBaseHandler
sys.path.append("Manager/")
import ShopInfoManager
import PhotoManager
import CommentManager
import RecordManager
import BaiduMapManager
import FavorManager

class CustomerShopDetailHandler(CustomerBaseHandler.CustomerBaseHandler):
    def get(self):
        if not self.current_user:
            self.redirect("/customershoplist")
            return
        customerId = self.current_user
        print customerId
        shopId = self.get_argument('shopId')

        shop_photo_urls = PhotoManager.get_shop_photo_urls(shopId)
        shop = ShopInfoManager.get_shopAllInfo(shopId)
        shopId = shop[0]
        shop_name = shop[1]
        address = shop[3]
        shop_phone = shop[4]
        star_rating = shop[7]
        desc = shop[8]
        bookable = False
        kv = sae.kvdb.KVClient()
        auto_order = kv.get(str(shopId))
        kv.disconnect_all()
        if auto_order > 0:
            bookable = True
        comments = CommentManager.get_shopcomment(shopId)

        isFavor = FavorManager.is_favored(customerId, shopId)

        # print str(shop_photo_urls)
        
        self.render("../static/template/CustomerShopDetail.html", customerId = customerId,
            shopId=shopId, shopName=shop_name, starRating=star_rating, address=address,
            shopPhone=shop_phone, description=desc, comments = comments, shopPhotoUrls=shop_photo_urls, isFavor=isFavor)

    # TODO: (HXM) add record & shop favor
    def post(self):
        # add record when customer make an appointment
        if 'shopId_order' in self.request.arguments:
            shopId_order = self.get_argument('shopId_order')
            customerId = self.get_argument('customerId')
            recordTime = str(datetime.datetime.now()).split('.')[0]

            # get customer location
            kv = sae.kvdb.KVClient()
            Location = kv.get(str(customerId))
            kv.disconnect_all()
            ori_lng = float(Location.split(',')[0])
            ori_lat = float(Location.split(',')[1])

            # calculate journeyTime
            des_lng = ShopInfoManager.get_longitude(shopId_order)
            des_lat = ShopInfoManager.get_latitude(shopId_order)
            duration = BaiduMapManager.get_duration_by_latlng(ori_lat, ori_lng, des_lat, des_lng)
            arriveTime = datetime.datetime.now() + datetime.timedelta(seconds = duration)
            journeyTime = str(arriveTime).split('.')[0]

            RecordManager.add_record(customerId, shopId_order, recordTime, journeyTime)

        # add/delete favor shop of customer
        if 'shopId_favor' in self.request.arguments:
            shopId_favor = self.get_argument('shopId_favor')
            customerId = self.get_argument('customerId')
            isFavor = self.get_argument('isFavor')
            if isFavor == "True":
                FavorManager.add_favor(customerId, shopId_favor)
            else:
                FavorManager.delete_favor(customerId, shopId_favor)
